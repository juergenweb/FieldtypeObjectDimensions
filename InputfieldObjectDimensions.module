<?php namespace ProcessWire;

/**
 * Inputfield ObjectDimensions to enter width, height and depth of an object
 *
 * @author Jürgen Kern
 * @license Licensed under MIT
 */

class InputfieldObjectDimensions extends Inputfield
{

    public static function getModuleInfo()
    {
        return [
          'title' => 'Inputfield Object Dimensions',
          'summary' => 'Renders an input field for entering 3 dimensions of an object (width, height and depth) as integer or float number.',
          'version' => 1,
          'permanent' => false,
          'requires' => [
              'FieldtypeObjectDimensions',
              'PHP>=7.0.0',
              'ProcessWire>=3'
            ],
          'author' => 'Jürgen Kern'
      ];
    }


    public function __construct()
    {
        // set default values for field configuration
        $this->set('input_type', '3d');
        $this->set('input_sizeunit', 'cm');
        $this->set('input_width', 100);
        $this->set('input_digits', 10);
        $this->set('input_decimals', 2);
        $this->set('input_required', []);
        $this->set('input_showhint', false);

        $this->set('width', '');
        parent::__construct();
    }


    /**
    * Per the Module interface, init() is called when the system is ready for API usage
    */
    public function init()
    {
        $info = $this->getModuleInfo();
        $version = $info['version'];
        //Add CSS and JS files
        $this->config->styles->add(config()->urls->{$this->className} . 'objectdimensions.css?v='.$version);
        $this->config->scripts->add(config()->urls->{$this->className} . 'objectdimensions.js?v='.$version);
        return parent::init();
    }


    /**
    * Method to get the labels of the inputfields
    * @return array
    */
    public function getLabels(): array
    {
        return [
        'width' => _x('Width', 'dimensions'),
        'height' => _x('Height', 'dimensions'),
        'depth' => _x('Depth', 'dimensions'),
      ];
    }

    /**
    * Method to render the inputfields for the dimension values
    * @return string
    */
    public function ___render(): string
    {
        $out = '';
        $value = $this->attr('value') ? $this->attr('value') : new ObjectDimension();

        //check demimals setting
        $decimals = intval($this->input_decimals);

        if ($decimals === 1) {
            $hint = sprintf(_x('Please enter max. %s digits including %s decimals.', 'dimensions'), $this->input_digits, $this->input_decimals);
            $steps = '0.1';
        } elseif ($decimals >= 1) {
            $hint = sprintf(_x('Please enter max. %s digits including %s decimals.', 'dimensions'), $this->input_digits, $this->input_decimals);
            $steps = '0.'.str_repeat(0, $decimals - 1).'1';
        } else {
            $hint = sprintf(_x('Please enter max. %s digits and no decimals.', 'dimensions'), $this->input_digits);
            $steps = '1';
        }
        //create placeholder depending on number of decimals
        $placeholderStr = '0.'.str_repeat('0', $this->input_decimals);
        foreach ($this->getLabels() as $key=>$v) {
            if((($this->input_type == '2d') && ($key != 'depth')) || ($this->input_type == '3d')){
              $out .= '<div id="'.$key.'_dimension" class="dimension-field">';
              $out .= '<label class="InputfieldHeader uk-form-label InputfieldStateToggle" for="'.$this->name.'_'.$key.'">'.$v.': </label>';
              $out .= '<input id="'.$this->name.'_'.$key.'" class="two-decimals" type="number" min="0" style="width:'.$this->input_width.'px" name="'.$this->name.'_'.$key.'" id="Inputfield_'.$key.'" value="'.$this->value->$key.'" step="'.$steps.'" oninput="restrict(this,'.$decimals.');" placeholder="'.$placeholderStr.'"/> '.$this->input_sizeunit;
              $out .= '</div>';
            }
        }
        // inform the user about how much decimals can be entered
        if ($this->input_showhint) {
            $out .= '<div><p class="hint">'.$hint.'</p></div>';
        }

        return $out;
    }


    /**
     * Pull the value from the given $input argument ($_POST or $_GET data) as WireInputData object, sanitize/validate it, and populate it to the value attribute of this Inputfield.
     *
     * @param WireInputData $input
     * @return $this
     *
     */
    public function ___processInput(WireInputData $input): self
    {
        $name = $this->attr('name');
        $value = $this->attr('value');

        $nameAttributes = [ // name in db => name input element
          'width' => $name . "_width",
          'height' => $name . "_height"
        ];

        // if 3 dimension add depth to the array
        if($this->input_type == '3d'){
          $depth = [ 'depth' => $name . "_depth"];
          $nameAttributes = array_merge($nameAttributes, $depth);
        }

        // loop through all inputs and set them if changed
        foreach($nameAttributes as $key => $name) {
          // get digits and
          $allowedDigits = intval($this->input_digits);
          $digitsEntered = strlen((string)$input->$name);
          $errors = [];
            // validation if required field is not empty
            if ($this->required) {
                if (empty($input->$name)) {
                    $this->error(sprintf(_x('Field "%s" is required and must contain a positive value except 0.', 'dimensions'), $this->getLabels()[$key]));
                    $errors[] = 'required';
                }
            } else if (!is_numeric($input->$name)) {
                      // validation if value is numeric
                      $errors[] = 'numeric';
                      if(!empty($input->$name))
                        $this->error(sprintf(_x('Field "%s" accepts only numeric values.', 'dimensions'), $this->getLabels()[$key]));
                    } else if ($input->$name <= 0) {
                        //validation if value is > 0
                        $errors[] = 'range';
                        if($this->required){
                          $this->error(sprintf(_x('Field "%s" accepts only values larger than 0.', 'dimensions'), $this->getLabels()[$key]));
                        } else if($input->$name < 0){
                            $this->error(sprintf(_x('Field "%s" does not accept negative values.', 'dimensions'), $this->getLabels()[$key]));
                        }
                    }
            if ($digitsEntered > $allowedDigits) {
                $errors[] = 'maximum';
                // validation if number of digits is not higher than in the config settings
                $msg = $this->_x('Field "%s" only accepts a maximum of %d digits (including decimals). %d digits were entered, so your input was not stored in the database.', 'dimensions');
                $this->error(sprintf($msg, $this->getLabels()[$key], $allowedDigits, $digitsEntered)); // output error message
                //$value->set($key, null);
            }

            if(!count($errors)){
              // if no errors occur at all, sanitize and set the value back to the inputfield and track potential changes in the value
              if ($this->input_decimals > 0) {
                  $sanitizedValue = (float) $input->$name;
              } else {
                  $sanitizedValue = (int) $input->$name;
              }
              $value->set($key, $sanitizedValue);
              $this->trackChange('value');
            }



        }
        return $this;
    }


    /**
     * Add additional configuration fields
     *
     * @return InputfieldWrapper
     *
     */
    // Add additional configuration fields
    public function ___getConfigInputfields(): InputfieldWrapper
    {

      //get all parent input fields
        $inputfields = parent::___getConfigInputfields();

        $f = modules()->get("InputfieldSelect");
        $f->set("label", _x('Type', 'dimensions'));
        $f->attr("name+id", "input_type");
        $f->attr("value", $this->input_type);
        $f->addOptions(['3d' => _x('3 dimensions', 'dimensions'), '2d' => _x('2 dimensions', 'dimensions')]);
        $f->required(true);
        $f->description = _x('3 dimensions: length, height and depth; 2 dimensions: length and height.', 'dimensions');
        $inputfields->append($f);

        // field to set the width of the inputfield in px
        $f = $this->modules->get('InputfieldInteger');
        $f->attr('name+id', 'input_width');
        $f->label = 'Input width';
        $f->attr('type', 'number');
        $f->attr('value', $this->input_width);
        $f->attr('size', 10);
        $f->attr('min', 10);
        $f->attr('step', 5);
        $f->description = _x('Width of each Inputfield in pixels.', 'dimensions');
        $inputfields->append($f);

        // field to enter a specific size unit for the dimensions (fe cm, inch, m,....) -> will be appended after the inputfield
        $f = $this->modules->get('InputfieldText');
        $f->attr('name+id', 'input_sizeunit');
        $f->label =  _x('Size unit', 'dimensions');
        $f->attr('value', $this->input_sizeunit);
        $f->attr('size', 10);
        $f->description = _x('The size unit for the 3 dimensions.', 'dimensions');
        $inputfields->append($f);

        // field to enter the number of digits
        $f = $this->modules->get('InputfieldInteger');
        $f->attr('name+id', 'input_digits');
        $f->attr('type', 'number');
        $f->label =  _x('Number of digits', 'dimensions');
        $f->attr('value', $this->input_digits);
        $f->attr('size', 10);
        $f->attr('min', 3);
        $f->attr('max', 64);
        $f->description = _x('The number of digits (including decimals) that can be entered in the dimension fields.', 'dimensions');
        $inputfields->append($f);

        // field to enter the number of decimals (fe 2) -> will be appended after the inputfield
        $f = $this->modules->get('InputfieldInteger');
        $f->attr('name+id', 'input_decimals');
        $f->attr('type', 'number');
        $f->label =  _x('Number of decimals', 'dimensions');
        $f->attr('value', $this->input_decimals);
        $f->attr('size', 10);
        $f->attr('min', 0);
        $f->attr('max', 30);
        $f->description = _x('The number of decimals that can be entered in the dimension fields.', 'dimensions');
        $f->notes = _x('A value of 0 means that the dimension value is type of integer and not float (no decimals).', 'dimensions');
        $inputfields->append($f);

        // checkbox field to enable/disable the hint text for the max numbers of decimals on the form
        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name+id', 'input_showhint');
        $f->attr('checked', $this->input_showhint == '1' ? 'checked' : '');
        $f->checkboxLabel = _x('Show hint', 'dimensions');
        $f->label =  _x('Show hint for max number of digits and decimals below input fields.', 'dimensions');
        $f->description = _x('If checked a hint text will be displayed under the input fields to inform the user how much digits and decimals are allowed.', 'dimensions');
        $inputfields->append($f);

        $f = $this->modules->get('InputfieldMarkup');
        $f->label = _x('API Notes', 'dimensions');
        $f->description = _x('The following can be used in your templates:', 'dimensions');
        $f->value .= '<pre>';
        $f->value .= '$page->' . $this->name . '->width' . PHP_EOL;
        $f->value .= '$page->' . $this->name . '->height' . PHP_EOL;
        $f->value .= '$page->' . $this->name . '->depth' . PHP_EOL;
        $f->value .= '$page->' . $this->name . '->volume' . PHP_EOL;
        $f->value .= '$page->' . $this->name . '->spacefloor' . PHP_EOL;
        $f->value .= '$page->' . $this->name . PHP_EOL;
        $f->value .= '</pre>';
        $inputfields->add($f);

        // output all input fields (parent and custom)
        return $inputfields;
    }


    /**
     * Allow these fields to get overwritten by user on per template base
     * @param \ProcessWire\Field $field
     * @return array
     *
     */
    public function getConfigAllowContext(Field $field): array
    {
        return [
          'input_required',
          'input_width',
          'input_sizeunit',
          'input_showhint'
        ];
    }
}
